{"version":3,"sources":["server/KurentoMonitor/MonitApiClient.ts"],"names":["MonitApiClient","MonitApiClient.constructor","MonitApiClient.getMonitStatus"],"mappings":"AAAA,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAElC,IAAO,WAAW,WAAW,eAAe,CAAC,CAAC;AAC9C,IAAO,MAAM,WAAW,WAAW,CAAC,CAAC;AAGrC;IAAAA;IA0CAC,CAACA;IAzCAD,uCAAcA,GAAdA,UAAeA,GAAaA;QAC3BE,MAAMA,CAACA,IAAIA,OAAOA,CAAcA,UAACA,OAAOA,EAAEA,MAAMA;YAC/CA,IAAIA,CAACA;gBACJA,IAAIA,OAAOA,GAAGA;oBACbA,IAAIA,EAAEA,GAAGA,CAACA,QAAQA,CAACA,IAAIA;oBACvBA,IAAIA,EAAEA,GAAGA,CAACA,QAAQA,CAACA,IAAIA;iBACvBA,CAACA;gBACFA,IAAIA,WAAwBA,CAACA;gBAE7BA,IAAIA,WAAWA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,OAAOA,EAAEA,UAAAA,QAAQA;oBAC3CA,IAAIA,MAAMA,GAAWA,EAAEA,CAACA;oBAExBA,QAAQA,CAACA,EAAEA,CAACA,MAAMA,EAAEA,UAAAA,KAAKA;wBACxBA,MAAMA,IAAIA,KAAKA,CAACA;oBACjBA,CAACA,CAACA,CAACA;oBACHA,QAAQA,CAACA,EAAEA,CAACA,OAAOA,EAAEA,UAAAA,KAAKA;wBACzBA,MAAMA,CAACA,KAAKA,CAACA,CAACA;wBACdA,MAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;oBACrBA,CAACA,CAACA,CAACA;oBACHA,QAAQA,CAACA,EAAEA,CAACA,KAAKA,EAAEA;wBAClBA,IAAIA,GAAGA,GAAGA,MAAMA,CAACA,WAAWA,CAACA,MAAMA,EAAEA,UAACA,KAAKA,EAAEA,MAAMA;4BAClDA,EAAEA,CAACA,CAACA,KAAKA,IAAIA,IAAIA,CAACA,CAACA,CAACA;gCACnBA,MAAMA,CAACA,KAAKA,CAACA,CAACA;gCACdA,MAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;4BACrBA,CAACA;4BACDA,WAAWA,GAAGA,IAAIA,WAAWA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;4BAC5CA,OAAOA,CAACA,WAAWA,CAACA,CAACA;4BACrBA,MAAMA,CAACA,KAAKA,CAACA,yBAAyBA,CAACA,CAACA;wBACzCA,CAACA,CAACA,CAACA;oBACJA,CAACA,CAACA,CAACA;gBACJA,CAACA,CAACA,CAACA;gBACHA,WAAWA,CAACA,EAAEA,CAACA,OAAOA,EAAEA,UAAAA,KAAKA;oBAC5BA,MAAMA,CAACA,KAAKA,CAACA,CAACA;oBACdA,MAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;gBACrBA,CAACA,CAACA,CAACA;YACJA,CAAEA;YAAAA,KAAKA,CAACA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBAChBA,MAAMA,CAACA,KAAKA,CAACA,CAACA;gBACdA,MAAMA,CAACA,KAAKA,CAACA,KAAKA,CAACA,CAACA;YACrBA,CAACA;QACFA,CAACA,CAACA,CAACA;IACJA,CAACA;IACFF,qBAACA;AAADA,CA1CA,AA0CCA,IAAA;AAED,iBAAS,cAAc,CAAC","file":"server/KurentoMonitor/MonitApiClient.js","sourcesContent":["import http = require('http');\r\nimport xml2js = require('xml2js');\r\nimport MonitUrl = require('./MonitUrl');\r\nimport MonitStatus = require('./MonitStatus');\r\nimport Logger = require('../Logger');\r\n\r\n\r\nclass MonitApiClient {\t\r\n\tgetMonitStatus(url: MonitUrl): Promise<MonitStatus> {\r\n\t\treturn new Promise<MonitStatus>((resolve, reject) => {\r\n\t\t\ttry {\r\n\t\t\t\tvar options = {\r\n\t\t\t\t\thost: url.monitUrl.host,\r\n\t\t\t\t\tpath: url.monitUrl.path\r\n\t\t\t\t};\r\n\t\t\t\tvar monitStatus: MonitStatus;\r\n\t\t\t\t\r\n\t\t\t\tvar getResponse = http.get(options, response => {\r\n\t\t\t\t\tvar xmlSrc: string = '';\r\n\t\t\t\t\t\r\n\t\t\t\t\tresponse.on('data', chunk => {\r\n\t\t\t\t\t\txmlSrc += chunk;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresponse.on('error', error => {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\tLogger.error(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tresponse.on('end', () => {\r\n\t\t\t\t\t\tvar src = xml2js.parseString(xmlSrc, (error, result) => {\r\n\t\t\t\t\t\t\tif (error != null) {\r\n\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\t\tLogger.error(error);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tmonitStatus = new MonitStatus(result.monit);\r\n\t\t\t\t\t\t\tresolve(monitStatus);\r\n\t\t\t\t\t\t\tLogger.debug('getMonitStatus resolved');\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tgetResponse.on('error', error => {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t\tLogger.error(error);\r\n\t\t\t\t});\t\t\r\n\t\t\t} catch (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t\tLogger.error(error);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport = MonitApiClient;"],"sourceRoot":"../"}