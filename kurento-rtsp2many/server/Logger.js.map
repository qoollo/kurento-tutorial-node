{"version":3,"sources":["server/Logger.ts"],"names":["formatTimestamp","padNumber"],"mappings":"AACA,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,OAAO,WAAW,SAAS,CAAC,CAAC;AAEpC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC5C,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAE9C,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACxB,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAE1B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,eAAe,EAA2C;IACrF,OAAO,EAAE,OAAO;IAChB,OAAO,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI;IAC1B,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,IAAI;IACd,WAAW,EAAE,cAAc;IAC3B,WAAW,EAAE,IAAI;IACjB,KAAK,EAAE,CAAC;IACR,gBAAgB,EAAE,IAAI;IACtB,+BAA+B,EAAE,IAAI;IACrC,KAAK,EAAE,OAAO;CACjB,CAAC,CAAC;AAEH,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC3C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAmC;IACrE,SAAS,EAAE,cAAM,OAAA,eAAe,CAAC,IAAI,IAAI,EAAE,CAAC,EAA3B,CAA2B;IAC5C,yBAAyB;IACzB,qIAAqI;IACrI,sGAAsG;IACtG,IAAI;IACJ,QAAQ,EAAE,IAAI;IACd,KAAK,EAAE,OAAO;CACjB,CAAC,CAAC;AAEH,yBAAyB,KAAW;IAChCA,MAAMA,CAACA,KAAKA,CAACA,WAAWA,EAAEA,GAAGA,GAAGA,GAAGA,SAASA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,GAAGA,CAACA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,EAAEA,CAACA,CAACA;UACrGA,GAAGA;QACLA,SAASA,CAACA,KAAKA,CAACA,QAAQA,EAAEA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,CAACA,KAAKA,CAACA,UAAUA,EAAEA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,CAACA,KAAKA,CAACA,UAAUA,EAAEA,EAAEA,CAACA,CAACA,GAAGA,GAAGA,GAAGA,SAASA,CAACA,KAAKA,CAACA,eAAeA,EAAEA,EAAEA,CAACA,CAACA,CAACA;AACvKA,CAACA;AAED,mBAAmB,CAAC,EAAE,KAAK,EAAE,CAAO;IAAPC,iBAAOA,GAAPA,OAAOA;IAChCA,CAACA,GAAGA,CAACA,GAAGA,EAAEA,CAACA;IACXA,MAAMA,CAACA,CAACA,CAACA,MAAMA,IAAIA,KAAKA,GAAGA,CAACA,GAAGA,IAAIA,KAAKA,CAACA,KAAKA,GAAGA,CAACA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA,GAAGA,CAACA,CAACA;AAC/EA,CAACA;AAED,iBAAS,OAAO,CAAC","file":"server/Logger.js","sourcesContent":["\r\nimport path = require('path');\r\nimport fs = require('fs');\r\nimport winston = require('winston');\r\n\r\nvar appDir = path.dirname(require.main.filename),\r\n    logsDir = path.join(appDir, '..', 'logs');\r\n\r\nif (!fs.existsSync(logsDir))\r\n    fs.mkdirSync(logsDir);\r\n\r\nwinston.add(winston.transports.DailyRotateFile, <winston.DailyRotateFileTransportOptions>{\r\n    dirname: logsDir,\r\n    maxsize: 100 * 1024 * 1024,  //  100 MB\r\n    maxFiles: 1,\r\n    filename: '20',\r\n    datePattern: 'yy-MM-dd.log',\r\n    prettyPrint: true,\r\n    depth: 5,\r\n    handleExceptions: true,\r\n    humanReadableUnhandledException: true,\r\n    level: 'debug'\r\n});\r\n\r\nwinston.remove(winston.transports.Console);\r\nwinston.add(winston.transports.Console, <winston.ConsoleTransportOptions>{\r\n    timestamp: () => formatTimestamp(new Date()),\r\n    //formatter: options => {\r\n    //    return options.timestamp() + ' ' + options.level.toUpperCase() + ' ' + (undefined !== options.message ? options.message : '') +\r\n    //    (options.meta && Object.keys(options.meta).length ? '\\n\\t' + JSON.stringify(options.meta) : '');\r\n    //},\r\n    colorize: true,\r\n    level: 'debug'\r\n});\r\n\r\nfunction formatTimestamp(value: Date): string {\r\n    return value.getFullYear() + '.' + padNumber(value.getMonth() + 1, 2) + '.' + padNumber(value.getDate(), 2)\r\n        + ' ' +\r\n        padNumber(value.getHours(), 2) + ':' + padNumber(value.getMinutes(), 2) + ':' + padNumber(value.getSeconds(), 2) + '.' + padNumber(value.getMilliseconds(), 4);\r\n}\r\n\r\nfunction padNumber(n, width, z = '0'): string {\r\n    n = n + '';\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n}\r\n\r\nexport = winston;"],"sourceRoot":"../"}