{"version":3,"sources":["server/WampCredentials.ts"],"names":["WampCredentials","WampCredentials.constructor","WampCredentials.setupAuth","WampCredentials.onChallenge"],"mappings":"AACA;;;;GAIG;AACH;IAEIA,yBAAYA,UAAkBA,EAAEA,MAAcA;QAC1CC,IAAIA,CAACA,UAAUA,GAAGA,UAAUA,CAACA;QAC7BA,IAAIA,CAACA,MAAMA,GAAGA,MAAMA,CAACA;IACzBA,CAACA;IAMMD,mCAASA,GAAhBA,UAAiBA,oBAAiDA;QAAlEE,iBAKCA;QAJGA,oBAAoBA,CAACA,WAAWA,GAAGA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;QACrDA,oBAAoBA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,MAAMA,CAACA;QAC1CA,oBAAoBA,CAACA,WAAWA,GAAGA,UAACA,OAAOA,EAAEA,MAAMA,EAAEA,KAAKA,IAAKA,OAAAA,KAAIA,CAACA,WAAWA,CAACA,OAAOA,EAAEA,MAAMA,EAAEA,KAAKA,CAACA,EAAxCA,CAAwCA,CAACA;QACxGA,MAAMA,CAACA,oBAAoBA,CAACA;IAChCA,CAACA;IAEOF,qCAAWA,GAAnBA,UAAoBA,OAAyBA,EAAEA,MAAcA,EAAEA,KAAUA;QACrEG,IAAIA,CAACA;YACDA,EAAEA,CAACA,CAACA,MAAMA,KAAKA,IAAIA,CAACA,UAAUA,CAACA,CAACA,CAACA;gBAC7BA,MAAMA,CAACA,IAAIA,CAACA,mBAAmBA,CAACA,KAAKA,CAACA,CAACA;YAC3CA,CAACA;QACLA,CAAEA;QAAAA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;YACTA,MAAMA,IAAIA,KAAKA,CAACA,yCAAyCA,GAAGA,CAACA,CAACA,OAAOA,CAACA,CAACA;QAC3EA,CAACA;IACLA,CAACA;IAGLH,sBAACA;AAADA,CA7BA,AA6BCA,IAAA;AAED,iBAAS,eAAe,CAAC","file":"server/WampCredentials.js","sourcesContent":["\r\n/**\r\n *  Base class for WAMP credentials used to authenticate \r\n *  WAMP node on WAMP Router.\r\n *  http://crossbar.io/docs/Authentication/\r\n */\r\nabstract class WampCredentials {\r\n\r\n    constructor(authMethod: string, authId: string) {\r\n        this.authMethod = authMethod;\r\n        this.authId = authId;\r\n    }\r\n\r\n    protected authMethod: string;\r\n\r\n    protected authId: string;\r\n\r\n    public setupAuth(wampConnectionConfig: autobahn.IConnectionOptions): autobahn.IConnectionOptions {\r\n        wampConnectionConfig.authmethods = [this.authMethod];\r\n        wampConnectionConfig.authid = this.authId;\r\n        wampConnectionConfig.onchallenge = (session, method, extra) => this.onChallenge(session, method, extra);\r\n        return wampConnectionConfig;\r\n    }\r\n\r\n    private onChallenge(session: autobahn.Session, method: string, extra: any): autobahn.OnChallengeHandler {\r\n        try {\r\n            if (method === this.authMethod) {\r\n                return this.onChallengeConcrete(extra);\r\n            }\r\n        } catch (e) {\r\n            throw new Error('Failed to process WAMP Auth challenge. ' + e.message);\r\n        }\r\n    }\r\n\r\n    protected abstract onChallengeConcrete(extra: any): autobahn.OnChallengeHandler;\r\n}\r\n\r\nexport = WampCredentials;"],"sourceRoot":"../"}