{"version":3,"sources":["server/WampRouterConnectionManager.ts"],"names":["WampRouterConnectionManager","WampRouterConnectionManager.constructor","WampRouterConnectionManager.start","WampRouterConnectionManager.stop","WampRouterConnectionManager.onConnectionOpened","WampRouterConnectionManager.onConnectionClosed","WampRouterConnectionManager.createConnection","WampRouterConnectionManager.openConnection","ConnectionState"],"mappings":"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","file":"server/WampRouterConnectionManager.js","sourcesContent":["\r\nimport autobahn = require('autobahn');\r\nimport WampCredentials = require('./WampCredentials');\r\nimport WampCraCredentials = require('./WampCraCredentials');\r\n\r\nclass WampRouterConnectionManager {\r\n\r\n    private url: string;\r\n    private realm: string;\r\n    private credentials: WampCredentials;\r\n    \r\n    private logger;\r\n\r\n    private connectionState: ConnectionState;\r\n    private connection: autobahn.Connection = null;\r\n    private session: autobahn.Session = null;\r\n\r\n    constructor(url: string, realm: string, credentials: WampCredentials, logger) {\r\n        this.url = url;\r\n        this.realm = realm;\r\n        this.credentials = credentials;\r\n        \r\n        this.logger = logger;\r\n        \r\n        this.connectionState = ConnectionState.NotCreated;\r\n    }\r\n\r\n    start(): Promise<autobahn.Session> {\r\n        if (this.connectionState === ConnectionState.Connecting || this.connectionState === ConnectionState.Connected) {\r\n            var err = 'WampRouterConnectionManager.start() cannot be called while WampRouterConnectionManager is started.';\r\n            this.logger.error(err);\r\n            throw new Error(err);\r\n        }\r\n\r\n        return this.createConnection()\r\n            .then(c => {\r\n                this.connection = c;\r\n                return this.openConnection(c);\r\n            });\r\n    }\r\n\r\n    stop(): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            var err = 'WampRouterConnectionManager.stop() cannot be called while WampRouterConnectionManager is not connected.';\r\n            this.logger.error(err);\r\n            throw new Error(err);\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.connection.close('Deliberate closing', 'Close please');\r\n            var original = this.connection.onclose;\r\n            this.connection.onclose = (r, d) => {\r\n                resolve();\r\n                return original(r, d);\r\n            }\r\n        });\r\n    }\r\n\r\n    private onConnectionOpened(session: autobahn.Session, details: any): void {\r\n        this.logger.info('Connection to WAMP Router opened. Session id: %d', session.id);\r\n        this.session = session;\r\n        this.connectionState = ConnectionState.Connected;\r\n    }\r\n\r\n    private onConnectionClosed(reason: string, details: any): boolean {\r\n        this.logger.info('Connection to WAMP Router closed. Session id: %d. Reason: ' + reason, this.session.id);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connection = null;\r\n        this.session = null;\r\n        return false;\r\n    }\r\n\r\n    private createConnection(): Promise<autobahn.Connection> {\r\n        var connectionOptions: autobahn.IConnectionOptions = this.credentials.setupAuth({\r\n            url: this.url,\r\n            realm: this.realm,\r\n        }),\r\n            connection = new autobahn.Connection(connectionOptions);\r\n        return Promise.resolve(connection);\r\n    }\r\n\r\n    private openConnection(connection: autobahn.Connection): Promise<autobahn.Session> {\r\n        return new Promise((resolve, reject) => {\r\n            connection.onopen = (s, d) => {\r\n                this.onConnectionOpened(s, d);\r\n                resolve(s);\r\n            };\r\n            connection.onclose = (r, d) => this.onConnectionClosed(r, d);\r\n            connection.open();\r\n            this.connectionState = ConnectionState.Connecting;\r\n        });\r\n    }\r\n}\r\n\r\nenum ConnectionState {\r\n    NotCreated,\r\n    Connecting,\r\n    Connected,\r\n    Disconnected\r\n}\r\n\r\nexport = WampRouterConnectionManager;"],"sourceRoot":"/source/"}