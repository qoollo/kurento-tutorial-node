{"version":3,"sources":["server/WampRouterConnectionManager.ts"],"names":["WampRouterConnectionManager","WampRouterConnectionManager.constructor","WampRouterConnectionManager.start","WampRouterConnectionManager.stop","WampRouterConnectionManager.state","WampRouterConnectionManager.session","WampRouterConnectionManager.onConnectionOpened","WampRouterConnectionManager.onConnectionClosed","WampRouterConnectionManager.createConnection","WampRouterConnectionManager.openConnection","WampRouterConnectionManager.subscribeSessionEvents","WampRouterConnectionManager.onNodeJoined","WampRouterConnectionManager.onNodeLeft"],"mappings":"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","file":"server/WampRouterConnectionManager.js","sourcesContent":["\r\nimport autobahn = require('autobahn');\r\nimport ConnectionState = require('./ConnectionState');\r\nimport WampCredentials = require('./WampCredentials');\r\nimport WampCraCredentials = require('./WampCraCredentials');\r\n\r\nclass WampRouterConnectionManager {\r\n\r\n    private url: string;\r\n    private realm: string;\r\n    private credentials: WampCredentials;\r\n\r\n    private logger: Console;\r\n\r\n    private connectionState: ConnectionState;\r\n    private connection: autobahn.Connection = null;\r\n    private _session: autobahn.Session = null;\r\n\r\n    private static closeReason: string = 'Deliberate closing';\r\n\r\n    constructor(url: string, realm: string, credentials: WampCredentials, logger) {\r\n        this.url = url;\r\n        this.realm = realm;\r\n        this.credentials = credentials;\r\n\r\n        this.logger = logger;\r\n\r\n        this.connectionState = ConnectionState.NotCreated;\r\n    }\r\n\r\n    start(): Promise<autobahn.Session> {\r\n        if (this.connectionState === ConnectionState.Connecting || this.connectionState === ConnectionState.Connected) {\r\n            var err = 'WampRouterConnectionManager.start() cannot be called while WampRouterConnectionManager is started.';\r\n            this.logger.error(err);\r\n            throw new Error(err);\r\n        }\r\n\r\n        return this.createConnection()\r\n            .then(c => {\r\n                this.connection = c;\r\n                return this.openConnection(c);\r\n            })\r\n            .then(s => this.subscribeSessionEvents(s))\r\n            .catch(e => {\r\n                var msg = 'Failed to open WAMP Router connection: ' + (e.message || e);\r\n                this.logger.error(msg);\r\n                return Promise.reject(msg);\r\n            });\r\n    }\r\n\r\n    stop(): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            var err = 'WampRouterConnectionManager.stop() cannot be called while WampRouterConnectionManager is not connected.';\r\n            this.logger.error(err);\r\n            throw new Error(err);\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            this.connection.close(WampRouterConnectionManager.closeReason, 'Close please');\r\n            var original = this.connection.onclose;\r\n            this.connection.onclose = (r, d) => {\r\n                resolve();\r\n                return original(r, d);\r\n            }\r\n        });\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    public get session(): autobahn.Session {\r\n        return this._session;\r\n    }\r\n\r\n    private onConnectionOpened(session: autobahn.Session, details: any): void {\r\n        this.logger.info('Connection to WAMP Router opened. Session id: %d', session.id);\r\n        this._session = session;\r\n        this.connectionState = ConnectionState.Connected;\r\n    }\r\n\r\n    private onConnectionClosed(reason: string, details: any): boolean {\r\n        this.logger.info('Connection to WAMP Router closed. Session id: %d. Reason: ' + reason, this._session.id);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connection = null;\r\n        this._session = null;\r\n        return reason == WampRouterConnectionManager.closeReason;\r\n    }\r\n\r\n    private createConnection(): Promise<autobahn.Connection> {\r\n        var connectionOptions: autobahn.IConnectionOptions = this.credentials.setupAuth({\r\n            url: this.url,\r\n            realm: this.realm,\r\n        }),\r\n            connection = new autobahn.Connection(connectionOptions);\r\n        return Promise.resolve(connection);\r\n    }\r\n\r\n    private openConnection(connection: autobahn.Connection): Promise<autobahn.Session> {\r\n        return new Promise((resolve, reject) => {\r\n            connection.onopen = (s, d) => {\r\n                this.onConnectionOpened(s, d);\r\n                resolve(s);\r\n            };\r\n            connection.onclose = (r, d) => this.onConnectionClosed(r, d);\r\n            connection.open();\r\n            this.connectionState = ConnectionState.Connecting;\r\n        });\r\n    }\r\n\r\n    private subscribeSessionEvents(session: autobahn.Session): autobahn.Session {\r\n        session.onjoin = f => this.onNodeJoined(f);\r\n        session.onleave = (r, d) => this.onNodeLeft(r, d);\r\n        return session;\r\n    }\r\n\r\n    private onNodeJoined(roleFeatures: any): void {\r\n        this.logger.info('WAMP Session event: join.', roleFeatures);\r\n    }\r\n\r\n    private onNodeLeft(reason: string, details: any): void {\r\n        this.logger.info('WAMP Session event: leave. Reason: ' + reason + '. Details: ', details);\r\n    }\r\n}\r\n\r\nexport = WampRouterConnectionManager;"],"sourceRoot":"../"}