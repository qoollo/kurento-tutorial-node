{"version":3,"sources":["server/KurentoHubServer.ts"],"names":["KurentoHubServer","KurentoHubServer.constructor","KurentoHubServer.start","KurentoHubServer.stop","KurentoHubServer.state","KurentoHubServer.registerRpcs","KurentoHubServer.register"],"mappings":"AACA,IAAO,MAAM,WAAW,UAAU,CAAC,CAAC;AAEpC,IAAO,kBAAkB,WAAW,sBAAsB,CAAC,CAAC;AAE5D,IAAO,cAAc,WAAW,kBAAkB,CAAC,CAAC;AAEpD,IAAO,2BAA2B,WAAW,+BAA+B,CAAC,CAAC;AAE9E,IAAO,kBAAkB,WAAW,sBAAsB,CAAC,CAAC;AAG5D;IAIIA;IACAC,CAACA;IAEDD,gCAAKA,GAALA;QAAAE,iBASCA;QARGA,MAAMA,CAACA,IAAIA,cAAcA,EAAEA;aACtBA,gBAAgBA,EAAEA;aAClBA,IAAIA,CAACA,UAAAA,GAAGA,IAAIA,OAAAA,KAAIA,CAACA,iBAAiBA,GAAGA,IAAIA,2BAA2BA,CAACA,GAAGA,EAAEA,2BAA2BA,EAAEA,IAAIA,kBAAkBA,CAACA,YAAYA,EAAEA,SAASA,CAACA,EAAEA,MAAMA,CAACA,EAAnJA,CAAmJA,CAACA;aAChKA,IAAIA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,CAACA,CAACA,KAAKA,EAAEA,EAATA,CAASA,CAACA;aACpBA,IAAIA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,KAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA,EAApBA,CAAoBA,CAACA;aAC/BA,IAAIA,CAACA,UAAAA,aAAaA;YACfA,QAAQA,CAACA;QACbA,CAACA,CAACA,CAACA;IACXA,CAACA;IAEDF,+BAAIA,GAAJA;QACIG,MAAMA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,IAAIA,EAAEA,CAACA;IACzCA,CAACA;IAEDH,sBAAWA,mCAAKA;aAAhBA;YACII,MAAMA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA;QACxCA,CAACA;;;OAAAJ;IAEOA,uCAAYA,GAApBA,UAAqBA,OAAyBA;QAA9CK,iBAWCA;QAVGA,IAAIA,GAAGA,GAAGA,OAAOA,CAACA,GAAGA,CAACA;YAClBA,OAAOA,CAACA,QAAQA,CAACA,kBAAkBA,CAACA,QAAQA,EAAEA,UAACA,IAAIA,EAAEA,MAAMA,IAAKA,OAAAA,KAAIA,CAACA,QAAQA,EAAEA,EAAfA,CAAeA,CAACA;SACnFA,CAACA,CAACA;QACHA,GAAGA,CAACA,IAAIA,CAACA,UAAAA,aAAaA;mBAClBA,aAAaA,CAACA,OAAOA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,MAAMA,CAACA,KAAKA,CAACA,mCAAmCA,GAAGA,CAACA,CAACA,SAASA,CAACA,EAA/DA,CAA+DA,CAACA;QAA3FA,CAA2FA,CAACA,CAACA;QACjGA,GAAGA,CAACA,KAAKA,CAACA,UAAAA,GAAGA;YACTA,MAAMA,CAACA,KAAKA,CAACA,2CAA2CA,EAAEA,GAAGA,CAACA,CAACA;YAC/DA,OAAOA,CAACA,MAAMA,CAACA,GAAGA,CAACA,CAACA;QACxBA,CAACA,CAACA,CAACA;QACHA,MAAMA,CAACA,GAAGA,CAACA;IACfA,CAACA;IAEDL,mCAAQA,GAARA;QACIM,MAAMA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;IAC9BA,CAACA;IAGLN,uBAACA;AAADA,CA5CA,AA4CCA,IAAA;AAED,iBAAS,gBAAgB,CAAA","file":"server/KurentoHubServer.js","sourcesContent":["\r\nimport logger = require('./Logger');\r\nimport autobahn = require('autobahn');\r\nimport KurentoHubRpcNames = require('./KurentoHubRpcNames');\r\nimport ConnectionState = require('./ConnectionState');\r\nimport CrossbarConfig = require('./CrossbarConfig');\r\nimport WampWebTransportConfiguration = require('./Wamp/Transport/WampWebTransportConfiguration');\r\nimport WampRouterConnectionManager = require('./WampRouterConnectionManager');\r\nimport WampCredentials = require('./WampCredentials');\r\nimport WampCraCredentials = require('./WampCraCredentials');\r\n\r\n\r\nclass KurentoHubServer {\r\n\r\n    private connectionManager: WampRouterConnectionManager;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    start(): Promise<void> {\r\n        return new CrossbarConfig()\r\n            .getKurentoHubUrl()\r\n            .then(url => this.connectionManager = new WampRouterConnectionManager(url, 'AquaMedKurentoInteraction', new WampCraCredentials('KurentoHub', 'secret2'), logger))\r\n            .then(m => m.start())\r\n            .then(s => this.registerRpcs(s))\r\n            .then(registrations => {\r\n                debugger;\r\n            });\r\n    }\r\n\r\n    stop(): Promise<void> {\r\n        return this.connectionManager.stop();\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.connectionManager.state;\r\n    } \r\n\r\n    private registerRpcs(session: autobahn.Session): Promise<autobahn.IRegistration[]> {\r\n        var res = Promise.all([\r\n            session.register(KurentoHubRpcNames.register, (args, kwargs) => this.register())\r\n        ]);\r\n        res.then(registrations => \r\n            registrations.forEach(r => logger.debug('KurentoHubServer RPC registered: ' + r.procedure)));\r\n        res.catch(err => {\r\n            logger.error('KurentoHubServer Failed to register RPCs.', err);\r\n            Promise.reject(err);\r\n        });\r\n        return res;\r\n    }\r\n\r\n    register(): Promise<number> {\r\n        return Promise.resolve(1);\r\n    }\r\n\r\n    //connectToStream(streamUrl: string, sdpOffer: string)\r\n}\r\n\r\nexport = KurentoHubServer"],"sourceRoot":"/source/"}