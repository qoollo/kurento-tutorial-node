{"version":3,"sources":["web/js/KurentoHubClient.ts"],"names":["KurentoHubClient","KurentoHubClient.constructor","KurentoHubClient.start","KurentoHubClient.stop","KurentoHubClient.state","KurentoHubClient.register","KurentoHubClient.connectToStream","KurentoHubClient.handleRpcError"],"mappings":"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","file":"web/js/KurentoHubClient.js","sourcesContent":["\r\nimport ConnectionState = require('../../server/ConnectionState');\r\nimport KurentoHubRpcNames = require('../../server/KurentoHubRpcNames');\r\nimport WampCraCredentials = require('../../server/WampCraCredentials');\r\nimport WampCraSaltedCredentials = require('../../server/WampCraSaltedCredentials');\r\nimport WampRouterConnectionManager = require('../../server/WampRouterConnectionManager');\r\nimport WampWebTransportConfiguration = require('../../server/Wamp/Transport/WampWebTransportConfiguration');\r\n\r\nclass KurentoHubClient {\r\n\r\n    private connectionManager: WampRouterConnectionManager;\r\n    private logger: Console;\r\n\r\n    constructor(config: crossbar.config.IWebTransport, kurentoHubDomain: string, logger = console) {\r\n        var transportConfig = new WampWebTransportConfiguration(config),\r\n            url = transportConfig.getUrl(kurentoHubDomain, 'kurentoHub'),\r\n            credentials = new WampCraCredentials('VideoConsumer', 'secret1'); //new WampCraSaltedCredentials('VideoConsumer', 'secret1', 'salt123', 100, 16);\r\n        this.connectionManager = new WampRouterConnectionManager(url, 'AquaMedKurentoInteraction', credentials, logger);\r\n        this.logger = logger;\r\n    }\r\n\r\n    start(): Promise<void> {\r\n        return this.connectionManager.start()\r\n            .then(s => this.logger.info('Connection to KurentoHub established successfully. Session #' + s.id))\r\n            .catch(err => {\r\n                var msg = 'Failed to establish connection with KurentoHub. ' + (err.message || err);\r\n                this.logger.log(msg);\r\n                return Promise.reject(msg);\r\n            });\r\n    }\r\n\r\n    stop(): Promise<void> {\r\n        return this.connectionManager.stop();\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.connectionManager.state;\r\n    } \r\n\r\n    public register(): Promise<number> {\r\n        return this.handleRpcError(this.connectionManager.session.call(KurentoHubRpcNames.register));\r\n    }\r\n\r\n    public connectToStream(streamUrl: string, sdpOffer: string): Promise<Protocol.IConnectToStreamResponse> {\r\n        return this.handleRpcError(this.connectionManager.session.call(KurentoHubRpcNames.connectToStream, [streamUrl, sdpOffer]));\r\n    }\r\n\r\n    private handleRpcError<T>(rpcPromise: Promise<T>): Promise<T> {\r\n        return rpcPromise\r\n            .catch(e => {\r\n                var err = 'Error calling RPC: ' + (e.error || '') + ' ' + (e.args && e.args[0]);\r\n                this.logger.error(err);\r\n                return Promise.reject(err);\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport = KurentoHubClient;"],"sourceRoot":"/source/"}